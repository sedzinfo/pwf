library(reticulate)
virtualenv_create("pwd")
py_install("numpy")
py_install("pandas")
py_install("scikit-learn")
py_install("dash")
vector1<-c(1,2,3,4,5,4,3,2,1)
vector2<-c(1,2,3,4,5,5,3,2,1)
vector3<-c(1,2,3,5,5,4,3,2,1)
vector4<-c(1,2,3,4,6,4,3,2,1)
vector5<-c(1,6,3,4,6,4,3,2,1)
vector<-vector1
which(vector==max(vector),arr.ind=TRUE)
which(vector==min(vector),arr.ind=TRUE)
min_max_index(vector1)
#' vector4<-c(1,2,3,4,6,4,3,2,1)
#' vector5<-c(1,6,3,4,6,4,3,2,1)
#' vector<-vector1
#' which(vector==max(vector),arr.ind=TRUE)
#' which(vector==min(vector),arr.ind=TRUE)
#' min_max_index(vector1)
#' min_max_index(vector2)
#' min_max_index(vector3)
#' min_max_index(vector4)
#' min_max_index(vector5)
min_max_index<-function(vector){
max_index<-which(vector==max(vector),arr.ind=TRUE)
min_index<-which(vector==min(vector),arr.ind=TRUE)
result<-list(max_index=max_index,min_index=min_index)
return(result)
}
min_max_index(vector1)
min_max_index(vector2)
min_max_index(vector3)
min_max_index(vector4)
min_max_index(vector5)
reticulate::repl_python()
#' compute_standard(vector,type="center")
#' compute_standard(vector,type="center_reversed")
#' compute_standard(vector,type="percent")
#' compute_standard(vector,type="scale_zero_one")
#' ndf<-compute_standard(seq(-6,6,.01),mean=0,sd=1,type="normal_density")
#' plot(ndf)
#' cdf<-compute_standard(ndf,mean=0,sd=1,type="cumulative_density")
#' plot(cdf)
#' compute_standard(vector,type="all")
#' compute_standard(seq(-6,6,.1),type="all",input="standard")
compute_standard<-function(vector,mean=0,sd=1,type="z",input="non_standard") {
length_vector<-length(vector)
if(input=="non_standard"){
z<-(vector-mean(vector,na.rm=TRUE))/stats::sd(vector,na.rm=TRUE)
}
if(input=="standard")
z<-vector
if (type=="z")
result<-z
if (type=="uz")
result<-vector*sd+mean
if (type=="sten"){
result<-round((z*2)+5.5,0)
result[result<1]<-1
result[result>10]<-10
}
if(type=="t")
result<-(z*10)+50
if(type=="stanine"){
result<-(z*2)+5
result[result<1]<-1
result[result>9]<-9
result<-round(result,0)
}
if(type=="center")
result<-vector-mean(vector,na.rm=TRUE)
if(type=="center_reversed")
result<-mean(vector,na.rm=TRUE)-vector
if(type=="percent")
result<-(vector/max(vector,na.rm=TRUE))*100
if(type=="scale_zero_one")
result<-(vector-min(vector,na.rm=TRUE))/(max(vector,na.rm=TRUE)-min(vector,na.rm=TRUE))
if(type=="normal_density")
result<-(1/(sqrt(sd*pi)))*exp(-0.5*((vector-mean)/sd)^2)
if(type=="cumulative_density") {
result<-c()
for(i in 1:length(vector))
result<-c(result,vector[i]+sum(vector[1:i]))
}
if(type=="all") {
mydata<-data.frame(score=vector)
mydata$z<-compute_standard(mydata$score,type="z",input=input)
mydata$sten<-compute_standard(mydata$score,type="sten",input=input)
mydata$t<-compute_standard(mydata$score,type="t",input=input)
mydata$stanine<-compute_standard(mydata$score,type="stanine",input=input)
mydata$percent<-compute_standard(mydata$score,type="percent",input=input)
mydata$scale_0_1<-compute_standard(mydata$score,type="scale_zero_one",input=input)
result<-data.frame(mydata[order(mydata$z),])
}
return(result)
}
vector<-c(rnorm(10),NA,rnorm(10))
compute_standard(vector,type="z")
compute_standard(vector,mean=0,sd=1,type="uz")
compute_standard(vector,type="sten")
compute_standard(vector,type="t")
compute_standard(vector,type="stanine")
compute_standard(vector,type="center")
compute_standard(vector,type="center_reversed")
compute_standard(vector,type="percent")
compute_standard(vector,type="scale_zero_one")
ndf<-compute_standard(seq(-6,6,.01),mean=0,sd=1,type="normal_density")
plot(ndf)
cdf<-compute_standard(ndf,mean=0,sd=1,type="cumulative_density")
plot(cdf)
compute_standard(vector,type="all")
compute_standard(seq(-6,6,.1),type="all",input="standard")
?cumsum
#' compute_standard(vector,type="center")
#' compute_standard(vector,type="center_reversed")
#' compute_standard(vector,type="percent")
#' compute_standard(vector,type="scale_zero_one")
#' ndf<-compute_standard(seq(-6,6,.01),mean=0,sd=1,type="normal_density")
#' plot(ndf)
#' cdf<-compute_standard(ndf,mean=0,sd=1,type="cumulative_density")
#' plot(cdf)
#' compute_standard(vector,type="all")
#' compute_standard(seq(-6,6,.1),type="all",input="standard")
compute_standard<-function(vector,mean=0,sd=1,type="z",input="non_standard") {
if(input=="non_standard"){
z<-(vector-mean(vector,na.rm=TRUE))/stats::sd(vector,na.rm=TRUE)
}
if(input=="standard")
z<-vector
if (type=="z")
result<-z
if (type=="uz")
result<-vector*sd+mean
if (type=="sten"){
result<-round((z*2)+5.5,0)
result[result<1]<-1
result[result>10]<-10
}
if(type=="t")
result<-(z*10)+50
if(type=="stanine"){
result<-(z*2)+5
result[result<1]<-1
result[result>9]<-9
result<-round(result,0)
}
if(type=="center")
result<-vector-mean(vector,na.rm=TRUE)
if(type=="center_reversed")
result<-mean(vector,na.rm=TRUE)-vector
if(type=="percent")
result<-(vector/max(vector,na.rm=TRUE))*100
if(type=="scale_zero_one")
result<-(vector-min(vector,na.rm=TRUE))/(max(vector,na.rm=TRUE)-min(vector,na.rm=TRUE))
if(type=="normal_density")
result<-(1/(sqrt(sd*pi)))*exp(-0.5*((vector-mean)/sd)^2)
if(type=="cumulative_density") {
result<-cumsum(vector)
# result<-cumprod(vector)
# result<-cummax(vector)
# result<-cummin(vector)
}
if(type=="all") {
mydata<-data.frame(score=vector)
mydata$z<-compute_standard(mydata$score,type="z",input=input)
mydata$sten<-compute_standard(mydata$score,type="sten",input=input)
mydata$t<-compute_standard(mydata$score,type="t",input=input)
mydata$stanine<-compute_standard(mydata$score,type="stanine",input=input)
mydata$percent<-compute_standard(mydata$score,type="percent",input=input)
mydata$scale_0_1<-compute_standard(mydata$score,type="scale_zero_one",input=input)
result<-data.frame(mydata[order(mydata$z),])
}
return(result)
}
vector<-c(rnorm(10),NA,rnorm(10))
compute_standard(vector,type="z")
compute_standard(vector,mean=0,sd=1,type="uz")
compute_standard(vector,type="sten")
compute_standard(vector,type="t")
compute_standard(vector,type="stanine")
compute_standard(vector,type="center")
compute_standard(vector,type="center_reversed")
compute_standard(vector,type="percent")
compute_standard(vector,type="scale_zero_one")
ndf<-compute_standard(seq(-6,6,.01),mean=0,sd=1,type="normal_density")
plot(ndf)
cdf<-compute_standard(ndf,mean=0,sd=1,type="cumulative_density")
plot(cdf)
compute_standard(vector,type="all")
compute_standard(seq(-6,6,.1),type="all",input="standard")
#' compute_standard(vector,type="center")
#' compute_standard(vector,type="center_reversed")
#' compute_standard(vector,type="percent")
#' compute_standard(vector,type="scale_zero_one")
#' ndf<-compute_standard(seq(-6,6,.01),mean=0,sd=1,type="normal_density")
#' plot(ndf)
#' cdf<-compute_standard(ndf,mean=0,sd=1,type="cumulative_density")
#' plot(cdf)
#' compute_standard(vector,type="all")
#' compute_standard(seq(-6,6,.1),type="all",input="standard")
compute_standard<-function(vector,mean=0,sd=1,type="z",input="non_standard") {
if(input=="non_standard"){
z<-(vector-mean(vector,na.rm=TRUE))/stats::sd(vector,na.rm=TRUE)
}
if(input=="standard")
z<-vector
if (type=="z")
result<-z
if (type=="uz")
result<-vector*sd+mean
if (type=="sten"){
result<-round((z*2)+5.5,0)
result[result<1]<-1
result[result>10]<-10
}
if(type=="t")
result<-(z*10)+50
if(type=="stanine"){
result<-(z*2)+5
result[result<1]<-1
result[result>9]<-9
result<-round(result,0)
}
if(type=="center")
result<-vector-mean(vector,na.rm=TRUE)
if(type=="center_reversed")
result<-mean(vector,na.rm=TRUE)-vector
if(type=="percent")
result<-(vector/max(vector,na.rm=TRUE))*100
if(type=="scale_zero_one")
result<-(vector-min(vector,na.rm=TRUE))/(max(vector,na.rm=TRUE)-min(vector,na.rm=TRUE))
if(type=="normal_density")
result<-(1/(sqrt(sd*pi)))*exp(-0.5*((vector-mean)/sd)^2)
if(type=="cumulative_density") {
result<-cumsum(vector)
# result<-cumprod(vector)
# result<-cummax(vector)
# result<-cummin(vector)
}
if(type=="all") {
mydata<-data.frame(score=vector)
mydata$z<-compute_standard(mydata$score,type="z",input=input)
mydata$sten<-compute_standard(mydata$score,type="sten",input=input)
mydata$t<-compute_standard(mydata$score,type="t",input=input)
mydata$stanine<-compute_standard(mydata$score,type="stanine",input=input)
mydata$percent<-compute_standard(mydata$score,type="percent",input=input)
mydata$scale_0_1<-compute_standard(mydata$score,type="scale_zero_one",input=input)
result<-data.frame(mydata[order(mydata$z),])
}
return(result)
}
?cumsum
reticulate::repl_python()
py_install("rpy2")
py_install("rpy2")
reticulate::repl_python()
py_install("plotnine")
reticulate::repl_python()
py_install("rpy2")
sessionInfo()
py_install("rpy2")
py_install("rpy2")
reticulate::repl_python()
sessionInfo()
install.packages(c("acepack", "cli", "geometry", "lfe", "lintr", "parsnip", "R6", "rcompanion", "recipes", "rlang", "spacesXYZ", "terra", "VGAM", "webmockr"))
reticulate::repl_python()
cwd = os.getcwd()
reticulate::repl_python()
py_install("matplotlib")
reticulate::repl_python()
